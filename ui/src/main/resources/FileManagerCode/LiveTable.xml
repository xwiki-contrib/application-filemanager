<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.1">
  <web>FileManagerCode</web>
  <name>LiveTable</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1403262184000</creationDate>
  <parent>FileManagerCode.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1403271327000</date>
  <contentUpdateDate>1403270893000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{html clean="false"}}
&lt;div class="xwiki-livetable-container"&gt;
  &lt;table id="{{id}}" class="xwiki-livetable"&gt;
    &lt;tr&gt;
      &lt;td class="xwiki-livetable-pagination"&gt;
        &lt;pagination total-count="rows.totalCount" offset="params.offset" limit="params.limit"
          show-results-range="true"&gt;&lt;/pagination&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class="xwiki-livetable-display-container"&gt;
        &lt;table class="xwiki-livetable-display"&gt;
          &lt;thead class="xwiki-livetable-display-header"&gt;
            &lt;tr&gt;
              &lt;th ng-if="selection" class="xwiki-livetable-display-header-text"&gt;&lt;/th&gt;
              &lt;th ng-repeat="column in columns" class="xwiki-livetable-display-header-text"
                  ng-class="{
                    sortable: column.sortable,
                    selected: params.sort == column.id,
                    asc: column.sortable &amp;&amp; (params.sort != column.id || params.order != 'desc'),
                    desc: params.sort == column.id &amp;&amp; params.order == 'desc'
                  }" ng-click="sort(column)"&gt;
                &lt;a wrap-if="column.sortable" rel="{{column.id}}"&gt;{{column.title}}&lt;/a&gt;
              &lt;/th&gt;
            &lt;/tr&gt;
            &lt;tr class="xwiki-livetable-display-filters"&gt;
              &lt;td class="xwiki-livetable-display-header-filter"&gt;
                &lt;input type="checkbox" ng-model="checkedAll" ng-indeterminate="indeterminate" /&gt;
              &lt;/td&gt;
              &lt;td ng-repeat="column in columns" class="xwiki-livetable-display-header-filter"&gt;
                &lt;div ng-if="column.filterable" ng-include="liveTableFilterTemplate"&gt;&lt;/div&gt;
              &lt;/td&gt;
            &lt;/tr&gt;
          &lt;/thead&gt;
          &lt;tbody class="xwiki-livetable-display-body"&gt;
            &lt;tr ng-repeat="row in rows.list"&gt;
              &lt;!-- Show the selection check box only if the row is visible. --&gt;
              &lt;td ng-if="selection"&gt;&lt;input type="checkbox" ng-show="row.id"
                ng-model="selectedRowIds[row.id]" ng-change="updateSelectedValue(row)" /&gt;&lt;/td&gt;
              &lt;td ng-repeat="column in columns" ng-include="liveTableCellTemplate"&gt;&lt;/td&gt;
            &lt;/tr&gt;
          &lt;/tbody&gt;
        &lt;/table&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class="xwiki-livetable-pagination"&gt;
        &lt;pagination total-count="rows.totalCount" offset="params.offset" limit="params.limit"&gt;&lt;/pagination&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
&lt;/div&gt;
{{/html}}</content>
  <object>
    <name>FileManagerCode.LiveTable</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>ce27e865-86f0-415f-a330-b3554a3ee38e</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define(['angular', 'liveTableFilters', 'pagination'], function(angular) {
  var liveTable = angular.module('liveTable', ['liveTableFilters', 'pagination']);

  liveTable.directive('livetable',  ['$location', '$timeout', function($location, $timeout) {
    var key = function(id, name) {
      return id + name.substr(0, 1).toUpperCase() + name.substr(1);
    };

    var getFilterParamName = function(filterName) {
      return '.' + filterName;
    };

    var getSelectedColumn = function(columns) {
      var firstSortableColumn = null;
      for (var i = 0; i &lt; columns.length; i++) {
        if (columns[i].selected) {
          return columns[i];
        } else if (!firstSortableColumn &amp;&amp; columns[i].sortable) {
          firstSortableColumn = columns[i];
        }
      }
      // If no column is explicitly selected then select the first sortable column.
      return firstSortableColumn;
    };

    // 'this' should be the directive scope.
    var updateParamsFromURL = function() {
      // Read the parameter values from the URL.
      var urlParams = $location.search();

      this.params = {
        offset: parseInt(urlParams[key(this.id, 'offset')]) || 0,
        limit: 15,
        sort: urlParams[key(this.id, 'sort')],
        order: urlParams[key(this.id, 'order')]
      };

      if (!this.params.sort) {
        var selectedColumn = getSelectedColumn(this.columns);
        if (selectedColumn) {
          this.params.sort = selectedColumn.id;
          this.params.order = selectedColumn.order;
        }
      }

      this.filter = {};
      angular.forEach(this.columns, function(column) {
        if (column.filterable) {
          var paramName = getFilterParamName(column.id);
          this.filter[column.id] = urlParams[key(this.id, paramName)];
          this.params[paramName] = this.filter[column.id];
        }
      }, this);
    };

    var storeParams = function(id, params) {
      // Save the parameters in the URL in order to have a bookmarkable state.
      for (var param in params) {
        $location.search(key(id, param), params[param]);
      }
    };

    return {
      restrict: 'E',
      scope: {
        'id': '@',
        'source': '=',
        'columns': '=',
        'selection': '=?'
      },
      templateUrl: new XWiki.Document('LiveTable', 'FileManagerCode').getURL('get'),
      link: function(scope, element, attrs) {
        // This can be made configurable.
        scope.liveTableFilterTemplate = new XWiki.Document('LiveTableFilter', 'FileManagerCode').getURL('get');
        scope.liveTableCellTemplate = new XWiki.Document('LiveTableCell', 'FileManagerCode').getURL('get');

        // Update the live table whenever the source changes.
        scope.$watch('source', function(newValue, oldValue) {
          // Reset the selected rows.
          if (scope.selection) {
            scope.selection = {};
            // Unfortunately the ngTrueValue directive supports only constant expressions so we can't bind the row
            // object to the checkbox value. All the data from the selected rows must be available so we use an
            // workaround: we keep an internal map with the selected row ids and we update the selection whenever it
            // changes.
            scope.selectedRowIds = {};
          }
          if (newValue === oldValue) {
            // Initialize the live table parameters and filters only after the source is initialized.
            // The live table id is not defined otherwise and thus we can't read the URL parameters.
            // The parameter changes will trigger a live table update.
            updateParamsFromURL.call(scope);
          } else if (scope.params.offset !== 0) {
            // Reset the pagination. This will trigger a live table update.
            scope.params.offset = 0;
          } else {
            // Force a live table update preserving the current parameters.
            scope.rows = scope.source.get(scope.params);
          }
        });

        // Update the live table whenever the parameters are modified.
        scope.$watch('params', function(newValue, oldValue) {
          storeParams(scope.id, newValue);
          scope.rows = scope.source ? scope.source.get(newValue) : [];
        }, true);

        // Update the parameters whenever the URL changes.
        scope.$on('$locationChangeSuccess', angular.bind(scope, updateParamsFromURL));

        scope.sort = function(column) {
          if (column.sortable) {
            scope.params.order = (column.id == scope.params.sort &amp;&amp; scope.params.order != 'desc') ? 'desc' : null;
            scope.params.sort = column.id;
          }
        };

        scope.$watch('checkedAll', function(newValue, oldValue) {
          angular.forEach(scope.rows.list, function(rowItem) {
            scope.selection[rowItem.id] = newValue;
          });
        }, true);

        // synchronize the master checkbox and the rest of the checkboxes.
        scope.$watch('[rows.list,selection]', function() {
          var checkedCount = 0;
          angular.forEach(scope.rows.list, function(rowItem) {
            if(scope.selection[rowItem.id] == true){
              checkedCount++;
            }
          });
          if(checkedCount == 0){
            scope.indeterminate = false;
            scope.checkedAll = false;
          }else if(checkedCount == scope.rows.list.length){
            scope.indeterminate = false;
            scope.checkedAll = true;
          }else {
            scope.indeterminate = true;
          }
        }, true);


        // The live table filters should not trigger an update immediately, but after a delay. We achieve this by
        // deferring the update when the filters are changed and by cancelling the pending update whenever a new change
        // is detected.
        var deferredUpdate = null;
        scope.$watch('filter', function(newValue, oldValue) {
          $timeout.cancel(deferredUpdate);
          deferredUpdate = $timeout(function() {
            // We trigger a live table update by adding the filters to the live table parameters.
            for(var filterName in scope.filter) {
              var filterValue = scope.filter[filterName];
              if (filterValue === '') {
                filterValue = undefined;
              }
              // Make sure the filter name doesn't collide with the default live table parameter names.
              scope.params[getFilterParamName(filterName)] = filterValue;
            }
          }, 500);
        }, true);

        scope.updateSelectedValue = function(row) {
          if (scope.selectedRowIds[row.id] === true) {
            // All the data from the selected rows must be available.
            scope.selection[row.id] = row;
          } else {
            delete scope.selection[row.id];
          }
        };
      }
    };
  }]);

  liveTable.directive('wrapIf',  function() {
    return {
      restrict: 'A',
      scope: {
        wrapIf: '='
      },
      link: function(scope, element, attrs) {
        if (!scope.wrapIf) {
          // Replace the element with its contents.
          var domElement = element[0];
          while (domElement.firstChild) {
            domElement.parentNode.insertBefore(domElement.firstChild, domElement);
          }
          element.remove();
        }
      }
    }
  });

  liveTable.directive('ngIndeterminate', function() {
    return {
        restrict: 'A',
        link: function(scope, element, attributes) {
            scope.$watch(attributes['ngIndeterminate'], function (value) {
                element.prop('indeterminate', !!value);
            });
        }
    };
  });
});</code>
    </property>
    <property>
      <name>Directives</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
