<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.1">
  <web>FileManagerCode</web>
  <name>DriveSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1401094916000</creationDate>
  <parent>DriveClass</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1401280484000</date>
  <contentUpdateDate>1401204779000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="FileManagerCode.Macros" /}}

{{velocity output="false"}}
#macro (handleDriveWebServiceRequest)
  #if ($request.action)
    #if ($services.csrf.isTokenValid($request.form_token))
      #if ($request.action == 'createFolder')
        #createFolder($request.name $request.parent)
      #elseif ($request.action == 'createFile')
        #createFile
      #elseif ($request.action == 'move')
        #batchMove
      #elseif ($request.action == 'copy')
        #batchCopy
      #elseif ($request.action == 'delete')
        #batchDelete
      #elseif ($request.action == 'download')
        #batchDownload
      #else
        $response.sendError(400, 'The specified action is not supported.')
      #end
    #elseif ($isAjaxRequest)
      $response.sendError(403, 'The CSRF token is missing.')
    #else
      $response.sendRedirect($services.csrf.getResubmissionURL())
    #end
  #else
    #set ($data = $NULL)
    #if ($request.data == 'files')
      #getChildFiles($doc $data)
    #elseif ($request.data == 'folders')
      #getChildFolders($doc $data)
    #elseif ($request.data == 'allFiles')
      #getAllFiles
    #elseif ($request.data == 'orphanFolders')
      #getOrphanFolders($data)
    #elseif ($request.data == 'orphanFiles')
      #getOrphanFiles
    #elseif ($request.data == 'activeJobs')
      #getActiveJobs($data)
    #elseif ($request.data == 'jobStatus')
      #getJobStatus($request.id $data)
    #else
      #getDrive($doc $data)
    #end
    #if ($data)
      #set ($discard = $response.setContentType('application/json'))
      $jsontool.serialize($data)
    #else
      $response.sendError(404);
    #end
  #end
#end

#macro (batchMove)
  #set ($paths = $request.getParameterValues('path'))
  #set ($paths = $paths.subList(0, $paths.size()))
  #set ($jobId = $services.drive.move($paths, $request.destination))
  #handleJobStartFailure($jobId)
#end

#macro (batchCopy)
  #set ($paths = $request.getParameterValues('path'))
  #set ($paths = $paths.subList(0, $paths.size()))
  #set ($jobId = $services.drive.copy($paths, $request.destination))
  #handleJobStartFailure($jobId)
#end

#macro (batchDelete)
  #set ($paths = $request.getParameterValues('path'))
  #set ($paths = $paths.subList(0, $paths.size()))
  #set ($jobId = $services.drive.delete($paths))
  #handleJobStartFailure($jobId)
#end

#macro (batchDownload)
  #set ($paths = $request.getParameterValues('path'))
  #set ($paths = $paths.subList(0, $paths.size()))
  #set ($packName = $request.name)
  #if ("$!packName" != '')
    #set ($packId = $stringtool.removeEnd($packName, '.zip'))
    #set ($packName = "${packId}.zip")
  #elseif ($paths.size() == 1)
    #set ($packId = $paths.get(0))
    #set ($packName = "$!{xwiki.getDocument($packId).plainTitle}.zip")
  #else
    #set ($packId = $util.generateRandomString(4))
    #set ($packName = "${packId}.zip")
  #end
  #getDownloadDocument($packId $packName $downloadDoc)
  #set ($packReference = $services.model.createAttachmentReference($downloadDoc.documentReference, $packName))
  #set ($jobId = $services.drive.pack($paths, $packReference))
  #if ($jobId)
    #set ($discard = $downloadDoc.set('jobId', $jobId))
    #set ($discard = $downloadDoc.saveAsAuthor())
  #end
  #handleJobStartFailure($jobId)
#end

#macro (getDownloadDocument $name $title $return)
  #set ($downloadId = "Download-${xcontext.userReference.name}-$name")
  #set ($downloadDocRef = $services.model.createDocumentReference($doc.wiki, $doc.space, $downloadId))
  #set ($downloadDoc = $xwiki.getDocument($downloadDocRef))
  #set ($discard = $downloadDoc.setHidden(true))
  #set ($discard = $downloadDoc.setTitle($title))
  #set ($discard = $downloadDoc.setParent($doc.fullName))
  #set ($discard = $downloadDoc.getObject('FileManagerCode.DownloadClass', true))
  ## Limit view and edit rights to the current user.
  #set ($rightsObj = $downloadDoc.getObject('XWiki.XWikiRights', true))
  #set ($discard = $rightsObj.set('allow', 1))
  #set ($discard = $rightsObj.set('levels', 'view,edit'))
  #set ($discard = $rightsObj.set('users', $services.model.serialize($xcontext.userReference, 'compactwiki')))
  #set ($return = $NULL)
  #setVariable("$return" $downloadDoc)
#end

#macro (getAllFiles)
  #set ($parameters = {'space': $doc.space})
  #getFilesStatement('' 'doc.space = :space' $parameters $statement)
  #getFiles($statement $parameters $data)
#end

#macro (getOrphanFiles)
  ## A file can have multiple parent folders, which are declared using tags, and one of these parent folders, usually
  ## the first, is set as wiki page parent so that a tree widget (such as the XWiki explorer tree) can still display the
  ## hierarchy nicely.
  #set ($parameters = {'space': $doc.space, 'parent': $doc.fullName})
  #getFilesStatement('' "doc.space = :space and $hasNoParent" $parameters $statement)
  #getFiles($statement $parameters $data)
#end

#macro (displayDrive)
  {{html clean="false"}}
  #set ($discard = $xwiki.ssx.use('FileManagerCode.TreeWidget'))
  ## We can use this instead if WebJars are supported.
  ## #set ($discard = $xwiki.linkx.use($services.webjars.url('org.xwiki.platform:xwiki-platform-tree-webjar',
  ##   'tree.min.css', {'evaluate': true}), {'type': 'text/css', 'rel': 'stylesheet'}))
  #set ($discard = $xwiki.ssfx.use('js/xwiki/table/livetable.css', true))
  #set ($discard = $xwiki.ssfx.use('uicomponents/pagination/pagination.css', 'true'))
  #set ($discard = $xwiki.ssx.use('FileManagerCode.LiveTableFilter'))
  #set ($discard = $xwiki.ssx.use('FileManagerCode.DriveSheet'))
  #set ($discard = $xwiki.jsx.use('FileManagerCode.DriveSheet'))
  &lt;div id="drive" ng-controller="DriveCtrl" class="no-bootstrap"&gt;
    &lt;table class="pane-splitter"&gt;
      &lt;tr&gt;
        &lt;td class="pane left"&gt;
          &lt;div class="pane-content"&gt;
            #set ($sourceURL = $doc.getURL('get', 'sheet=FileManagerCode.DriveTree&amp;outputSyntax=plain'))
            &lt;drive-tree drive="drive" class="jstree-no-links" data-url="$sourceURL" data-responsive="true"
              data-icons="true" data-edges="true" data-dragAndDrop="true" data-contextMenu="true"&gt;&lt;/drive-tree&gt;
          &lt;/div&gt;
        &lt;/td&gt;
        &lt;td class="pane-splitter-handler"&gt;
          &lt;div&gt;&amp;equiv;&lt;/div&gt;
        &lt;/td&gt;
        &lt;td class="pane right"&gt;
          &lt;div class="pane-content"&gt;
            &lt;files ng-if="['drive', 'folder', 'files'].indexOf(drive.location.type) &gt;= 0" drive="drive"&gt;&lt;/files&gt;
            #maybeDisplayJobs
          &lt;/div&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
  &lt;/div&gt;
  {{/html}}
#end

#macro (filesLiveTableTemplate)
  #set ($columns = [
    {
      'id': 'name',
      'title': $services.localization.render('fileManager.liveTable.name'),
      'type': 'file',
      'sortable': true,
      'filterable': true
    }, {
      'id': 'size',
      'title': $services.localization.render('fileManager.liveTable.size'),
      'type': 'bytes',
      'sortable': true
    }, {
      'id': 'mediaType',
      'title': $services.localization.render('fileManager.liveTable.type'),
      'type': 'mediaType'
    }, {
      'id': 'date',
      'title': $services.localization.render('fileManager.liveTable.date'),
      'type': 'date',
      'sortable': true,
      'filterable': true
    }, {
      'id': 'author',
      'title': $services.localization.render('fileManager.liveTable.author'),
      'type': 'user',
      'sortable': true,
      'filterable': true
    }
  ])
  {{ selectedFiles = getSelectedFiles(selection) | hide }}
  &lt;div ng-show="drive.viewer == 'files'" class="btn-toolbar file-actions" role="toolbar"&gt;
    &lt;div class="btn-group" ng-show="drive.location.type == 'drive' || drive.location.type == 'folder'"&gt;
      &lt;button class="btn btn-default" ng-disabled="drive.readOnly || !drive.location.node.data.canCreate"
          ng-click="drive.viewer = 'upload'" type="button"
          title="$services.localization.render('fileManager.action.newFileHint')"&gt;
        &lt;img src="$xwiki.getSkinFile('icons/silk/page_white_add.png')" class="icon"
          alt="$services.localization.render('fileManager.action.newFile')" /&gt;
        $services.localization.render('fileManager.action.newFile')
      &lt;/button&gt;
    &lt;/div&gt;&lt;div class="btn-group" dropdown&gt;
      &lt;button type="button" class="btn btn-default" title="$services.localization.render('fileManager.action.downloadFilesHint')"
          ng-disabled="drive.readOnly || selectedFiles.length == 0" ng-click="download(selectedFiles)"&gt;
        &lt;img src="$xwiki.getSkinFile('icons/silk/page_white_put.png')" class="icon"
          alt="$services.localization.render('fileManager.action.download')" /&gt;
        $services.localization.render('fileManager.action.download')
      &lt;/button&gt;
      &lt;button type="button" class="btn btn-default dropdown-toggle" dropdown-toggle&gt;
        &lt;span class="caret"&gt;&lt;/span&gt;
      &lt;/button&gt;
      &lt;ul class="dropdown-menu" role="menu"&gt;
        &lt;li&gt;
          &lt;a href="#" ng-click="drive.viewer = 'downloads'; $event.preventDefault()"&gt;
            $services.localization.render('fileManager.action.recentDownloads')
          &lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;&lt;div class="btn-group"&gt;
      &lt;button type="button" class="btn btn-default" title="$services.localization.render('fileManager.action.cutFilesHint')"
          ng-disabled="drive.readOnly || !canCut(selectedFiles)" ng-click="cut(selectedFiles)"&gt;
        &lt;img src="$xwiki.getSkinFile('icons/silk/cut.png')" class="icon"
          alt="$services.localization.render('fileManager.action.cut')" /&gt;
        $services.localization.render('fileManager.action.cut')
      &lt;/button&gt;
      &lt;button type="button" class="btn btn-default" title="$services.localization.render('fileManager.action.copyFilesHint')"
          ng-disabled="drive.readOnly || !canCopy(selectedFiles)" ng-click="copy(selectedFiles)"&gt;
        &lt;img src="$xwiki.getSkinFile('icons/silk/page_white_copy.png')" class="icon"
          alt="$services.localization.render('fileManager.action.copy')" /&gt;
        $services.localization.render('fileManager.action.copy')
      &lt;/button&gt;
      &lt;button type="button" class="btn btn-default" title="$services.localization.render('fileManager.action.pasteHint')"
          ng-if="drive.location.type == 'drive' || drive.location.type == 'folder'"
          ng-disabled="!clipboard" ng-click="paste()"&gt;
        &lt;img src="$xwiki.getSkinFile('icons/silk/page_white_paste.png')" class="icon"
          alt="$services.localization.render('fileManager.action.paste')" /&gt;
        $services.localization.render('fileManager.action.paste')
      &lt;/button&gt;
    &lt;/div&gt;&lt;div class="btn-group"&gt;
      &lt;button type="button" class="btn btn-default" title="$services.localization.render('fileManager.action.renameFileHint')"
          ng-disabled="drive.readOnly || selectedFiles.length != 1 || !selectedFiles[0].canRename"
          ng-click="rename(selectedFiles[0])"&gt;
        &lt;img src="$xwiki.getSkinFile('icons/silk/textfield_rename.png')" class="icon"
          alt="$services.localization.render('fileManager.action.rename')" /&gt;
        $services.localization.render('fileManager.action.rename')
      &lt;/button&gt;
      &lt;button type="button" class="btn btn-default" title="$services.localization.render('fileManager.action.deleteFilesHint')"
          ng-disabled="drive.readOnly || !canDelete(selectedFiles)" ng-click="delete(selectedFiles)"&gt;
        &lt;img src="$xwiki.getSkinFile('icons/silk/cross.png')" class="icon"
          alt="$services.localization.render('fileManager.action.delete')" /&gt;
        $services.localization.render('fileManager.action.delete')
      &lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;livetable ng-show="drive.viewer == 'files'" id="{{id}}" source="source" selection="selection"
    columns="$escapetool.xml($jsontool.serialize($columns))"&gt;&lt;/livetable&gt;
  &lt;file-upload ng-show="drive.viewer == 'upload'" drive="drive" back="backToList()"&gt;&lt;/file-upload&gt;
  #downloads
#end

#macro (fileUploadTemplate)
  &lt;div class="btn-toolbar" role="toolbar"&gt;
    &lt;div class="btn-group"&gt;
      &lt;button type="button" class="btn btn-default" title="$services.localization.render('fileManager.action.backToFileList')"
          ng-if="back" ng-click="back()"&gt;
        &lt;img src="$xwiki.getSkinFile('icons/silk/arrow_left.png')" class="icon"
          alt="$services.localization.render('fileManager.action.back')" /&gt;
        $services.localization.render('fileManager.action.back')
      &lt;/button&gt;
    &lt;/div&gt;
    &lt;div class="btn-group"&gt;
      &lt;button type="button" class="btn btn-default" title="$services.localization.render('fileManager.action.clearUploadStatus')"
         ng-if="drive.uploads.finished.length &gt; 0" ng-click="clearUploads()"&gt;
        $services.localization.render('fileManager.action.clear')
      &lt;/button&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;h3&gt;$services.localization.render('fileManager.action.upload.destinationFolder', ['{{drive.location.node.text}}'])&lt;/h3&gt;
  &lt;input type="file" on-file-select="uploadFiles($files)" multiple
    folder-selection-enabled="folderSelectionEnabled" /&gt;
  &lt;label ng-show="folderSelectionSupported"&gt;
    &lt;input type="checkbox" ng-model="folderSelectionEnabled" /&gt;
    $services.localization.render('fileManager.action.upload.enableFolderSelection')
  &lt;/label&gt;
  &lt;div ng-if="dropSupported" on-file-drop="uploadFiles($files)" drag-over-class="active"
    class="file-drop-zone"&gt;$services.localization.render('fileManager.action.upload.dropZoneHint')&lt;/div&gt;
  &lt;ul class="uploads"&gt;
    &lt;li class="upload loading uploads-pending" ng-show="drive.uploads.pending.length &gt; 0"&gt;
      $services.localization.render('fileManager.action.upload.pendingUploadsCount', ['{{drive.uploads.pending.length}}'])
    &lt;/li&gt;
    &lt;li class="upload" ng-repeat="upload in drive.uploads.running" file-upload-status="upload"&gt;&lt;/li&gt;
    &lt;li class="upload" ng-repeat="upload in drive.uploads.finished" file-upload-status="upload"&gt;&lt;/li&gt;
  &lt;/ul&gt;
#end

#macro (fileUploadStatusTemplate)
  &lt;div class="upload-file"&gt;
    &lt;span file="upload.file"&gt;&lt;/span&gt;
    &lt;span class="upload-file-path"&gt;
      &lt;span ng-if="upload.status == 'Done'"&gt;({{ upload.file.size | bytes }}) {{ upload.file.date | timeAgo }}&lt;/span&gt;
      $services.localization.render('fileManager.action.upload.destinationPath', ['{{upload.path.join(" / ")}}'])
    &lt;/span&gt;
  &lt;/div&gt;
  &lt;div class="progress-container {{upload.status}}" ng-if="upload.status != 'Done'"&gt;
    &lt;xprogress value="{{upload.loaded}}" max="{{upload.total}}"&gt;&lt;/xprogress&gt;
    &lt;input type="image" src="$xwiki.getSkinFile('icons/silk/cancel.png')" ng-if="upload.status == 'InProgress'"
      class="cancel icon" title="$services.localization.render('fileManager.action.upload.cancelHint')" ng-click="upload.abort()" /&gt;
    &lt;div class="progress-info"&gt;
      &lt;span ng-if="upload.status == 'InProgress' &amp;&amp; upload.estimatedRemainingTime"&gt;
        $services.localization.render('fileManager.action.upload.estimatedRemainingTime', ['{{ upload.estimatedRemainingTime | duration }}'])
        &amp;#8212;
      &lt;/span&gt;
      &lt;span ng-if="upload.status == 'Aborted'"&gt;
        {{ upload.end | timeAgo }}
        &amp;#8212;
      &lt;/span&gt;
      $services.localization.render('fileManager.action.upload.bytesSent', ['{{ upload.loaded | bytes }}', '{{ upload.total | bytes }}'])
    &lt;/div&gt;
  &lt;/div&gt;
#end

#macro (downloads)
  &lt;div ng-show="drive.viewer == 'downloads'" ng-controller="DownloadCtrl"&gt;
    &lt;div class="btn-toolbar" role="toolbar"&gt;
      &lt;div class="btn-group"&gt;
        &lt;button type="button" class="btn btn-default" ng-click="drive.viewer = 'files'"
            title="$services.localization.render('fileManager.action.backToFileList')"&gt;
          &lt;img src="$xwiki.getSkinFile('icons/silk/arrow_left.png')" class="icon"
            alt="$services.localization.render('fileManager.action.back')" /&gt;
          $services.localization.render('fileManager.action.back')
        &lt;/button&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;h3&gt;$services.localization.render('fileManager.action.recentDownloads')&lt;/h3&gt;
    &lt;ul class="downloads"&gt;
      &lt;li class="download" ng-repeat="download in downloadsInProgress = (drive.jobs | filter:isDownloadReady(false))"&gt;
        &lt;div&gt;
          &lt;img src="$xwiki.getSkinFile('icons/silk/page_white_zip.png')" alt="zip" class="icon" /&gt;
          {{download.request.outputFile.name}}
          &lt;span class="download-info"&gt;
            ({{ download.bytesWritten | bytes }}) {{ download.startDate | timeAgo }}
          &lt;/span&gt;
        &lt;/div&gt;
        &lt;div class="progress-container"&gt;
          &lt;xprogress value="{{download.progress.offset}}" max="1"&gt;&lt;/xprogress&gt;
          &lt;div class="progress-info"&gt;
            $services.localization.render('fileManager.action.download.buildingPackage')
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li class="download" ng-repeat="download in downloadsReady = (drive.jobs | filter:isDownloadReady(true))"&gt;
        &lt;img src="$xwiki.getSkinFile('icons/silk/page_white_zip.png')" alt="zip" class="icon" /&gt;
        &lt;a href="{{download.request.outputFile.url}}"&gt;{{download.request.outputFile.name}}&lt;/a&gt;
        &lt;span class="download-info"&gt;
          ({{ download.outputFileSize | bytes }}) {{ download.endDate | timeAgo }}
        &lt;/span&gt;
      &lt;/li&gt;
      &lt;li class="download" ng-show="downloadsInProgress.length == 0 &amp;&amp; downloadsReady.length == 0"&gt;
        $services.localization.render('fileManager.action.noRecentDownloads')
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
#end

#macro (maybeDisplayJobs)
  &lt;ul ng-cloak ng-if="drive.location.type == 'jobs'" class="jobs"&gt;
    &lt;li ng-if="drive.jobs.length == 0"&gt;No recent tasks&lt;/li&gt;
    &lt;li class="job" ng-repeat="job in drive.jobs | filter:{state: '!FINISHED'}:true"&gt;
      #displayJob
    &lt;/li&gt;
    &lt;li class="job" ng-repeat="job in drive.jobs | filter:{state: 'FINISHED'}:true"&gt;
      #displayJob
    &lt;/li&gt;
  &lt;/ul&gt;
#end

#macro (displayJob)
  &lt;dl&gt;
    &lt;dt&gt;Task Type&lt;/dt&gt;
    &lt;dd ng-bind="job.request.type"&gt;&lt;/dd&gt;
    &lt;dt&gt;Paths&lt;/dt&gt;
    &lt;dd&gt;
      &lt;ul ng-repeat="path in job.request.paths"&gt;
        &lt;li&gt;{{path.parent}}/{{path.child}}&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/dd&gt;
    &lt;dt ng-if="job.request.destination"&gt;Destination&lt;/dt&gt;
    &lt;dd ng-if="job.request.destination"&gt;
      {{job.request.destination.parent}}/{{job.request.destination.child}}
    &lt;/dd&gt;
    &lt;dt&gt;Started&lt;/dt&gt;
    #set ($dateFormat = $xwiki.getXWikiPreference('dateformat', 'yyyy/MM/dd HH:mm'))
    &lt;dd title="{{ job.startDate | date : '$dateFormat' }}"&gt;{{ job.startDate | timeAgo : '$dateFormat' }}&lt;/dd&gt;
    &lt;dt ng-if="job.state == 'FINISHED'"&gt;Duration&lt;/dt&gt;
    &lt;dd ng-if="job.state == 'FINISHED'"&gt;{{ job.endDate - job.startDate | duration}}&lt;/dd&gt;
    &lt;dt&gt;By&lt;/dt&gt;
    &lt;dd user="{{job.request.user}}"&gt;&lt;/dd&gt;
    &lt;dt ng-if="job.state != 'FINISHED'"&gt;Progress&lt;/dt&gt;
    &lt;dd ng-if="job.state != 'FINISHED'" class="progress-container"&gt;
      &lt;xprogress value="{{job.progress.offset}}" max="1"&gt;&lt;/xprogress&gt;
    &lt;/dd&gt;
  &lt;/dl&gt;
#end
{{/velocity}}

{{velocity wiki="false"}}
#if ($xcontext.action == 'get')
  #if ($request.template == 'files')
    #filesLiveTableTemplate
  #elseif ($request.template == 'fileUpload')
    #fileUploadTemplate
  #elseif ($request.template == 'fileUploadStatus')
    #fileUploadStatusTemplate
  #else
    #handleDriveWebServiceRequest
  #end
#end
{{/velocity}}

{{velocity}}
#if ($xcontext.action != 'get')
  {{include reference="FileManagerCode.Migrator" /}}
#end
{{/velocity}}

{{velocity}}
#if ($xcontext.action != 'get')
  #checkIfMigrationIsNeeded($isMigrationNeeded)
  #if ($isMigrationNeeded)
    #handleMigration
  #else
    #displayDrive
  #end
#end
#set($docextras=[])
{{/velocity}}</content>
  <object>
    <name>FileManagerCode.DriveSheet</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>d9f9fdc1-3059-4d56-bfe4-0d8ef78cbab2</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/*
#set ($angularVersion = '1.3.8')
#set ($angularFileUploadVersion = '1.6.1')
#set ($angularUIBootstrapVersion = '0.12.0')
#set ($jsTreeVersion = '3.0.8')
*/
require.config({
  paths: {
    angular: [
      '//ajax.googleapis.com/ajax/libs/angularjs/$angularVersion/angular.min',
      "$!services.webjars.url('angularjs', 'angular.min.js')"
    ],
    'angular-resource': [
      '//ajax.googleapis.com/ajax/libs/angularjs/$angularVersion/angular-resource.min',
      "$!services.webjars.url('angularjs', 'angular-resource.min.js')"
    ],
    'angular-ui-bootstrap': [
      '//cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/$angularUIBootstrapVersion/ui-bootstrap-tpls.min',
      "$!services.webjars.url('angular-ui-bootstrap', 'ui-bootstrap-tpls.min.js')"
    ],
    fileUploadHTML5Shim: [
      '//cdnjs.cloudflare.com/ajax/libs/danialfarid-angular-file-upload/$angularFileUploadVersion/angular-file-upload-html5-shim.min',
      "$!services.webjars.url('angular-file-upload', 'angular-file-upload-html5-shim.min.js')"
    ],
    fileUpload: [
      '//cdnjs.cloudflare.com/ajax/libs/danialfarid-angular-file-upload/$angularFileUploadVersion/angular-file-upload.min',
      "$!services.webjars.url('angular-file-upload', 'angular-file-upload.min.js')"
    ],
    jsTree: [
      '//cdnjs.cloudflare.com/ajax/libs/jstree/$jsTreeVersion/jstree.min',
      "$!services.webjars.url('jstree', 'jstree.min.js')"
    ],
    JobRunner: "$xwiki.getAttachmentURL('FileManagerCode.JobRunner', 'jobRunner.min')",
    xtree: "$xwiki.getAttachmentURL('FileManagerCode.TreeWidget', 'tree.min')",
    pagination: '$xwiki.getURL("FileManagerCode.Pagination", "jsx", "language=$xcontext.language")',
    liveTable: '$xwiki.getURL("FileManagerCode.LiveTable", "jsx", "language=$xcontext.language")',
    liveTableFilters: '$xwiki.getURL("FileManagerCode.LiveTableFilter", "jsx", "language=$xcontext.language")',
  },
  shim: {
    angular: {
      deps: ['fileUploadHTML5Shim'],
      exports: 'angular'
    },
    'angular-resource': {
      deps: ['angular'],
      exports: 'angular'
    },
    'angular-ui-bootstrap': {
      deps: ['angular']
    },
    fileUpload: {
      deps: ['angular']
    },
    jsTree: {
      deps: ['jquery']
    }
  }
});

require(['jquery', 'angular', 'JobRunner', 'angular-resource', 'angular-ui-bootstrap', 'fileUpload', 'xtree', 'liveTable'], function($, angular, JobRunner) {</code>
    </property>
    <property>
      <name>Require Start &amp; Configuration</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>FileManagerCode.DriveSheet</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>39e1dccf-38d0-4709-90b1-f466d7728ab6</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>  var driveServices = angular.module('driveServices', ['ngResource']);

  var defaultParams = {
    outputSyntax: 'plain',
    space: XWiki.currentSpace,
    page: XWiki.currentPage
  };

  // The colon ':' is a special character for entity references so we use '!' instead to create the URL and then replace
  // it with ':' so that Angular can find the parameter.
  var url = new XWiki.Document('!page', '!space').getURL('get').replace(/\/!/g, '/:');

  var addGET = function(api, data) {
    api['get' + data.substr(0, 1).toUpperCase() + data.substr(1)] = {
      params: {data: data}
    }
  };

  var formToken = $('meta[name=form_token]').attr('content');

  var addPOST = function(api, action) {
    // TODO: Maybe we should submit the data as JSON (Angular's default behaviour) but for this we need to enhance the
    // JSON Velocity tool to read the request payload on the server side. We can use Jackson's raw/untyped/simple data
    // binding (see http://wiki.fasterxml.com/JacksonInFiveMinutes#A.22Raw.22_Data_Binding_Example ).
    api[action] = {
      method: 'POST',
      params: {
        action: action,
        form_token: formToken
      },
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'
      }
    }
  }

  var createAPI = function(data, actions) {
    var api = {};

    $.each(data, function(index, value) {
      addGET(api, value);
    });

    $.each(actions, function(index, value) {
      addPOST(api, value);
    });

    return api;
  }

  driveServices.factory('Drive', ['$resource', function($resource) {
    var data = ['folders', 'allFiles', 'orphanFolders', 'orphanFiles', 'activeJobs', 'jobStatus'];
    var actions = ['createFolder', 'move', 'copy', 'delete', 'download'];
    var api = createAPI(data, actions);
    api.getActiveJobs.isArray = true;
    return $resource(url, defaultParams, api);
  }]);

  driveServices.factory('Folder', ['$resource', function($resource) {
    var data = ['files', 'folders'];
    var actions = ['createFolder', 'move', 'copy', 'delete'];
    var api = createAPI(data, actions);
    return $resource(url, defaultParams, api);
  }]);

  driveServices.factory('File', ['$resource', function($resource) {
    var data = [];
    var actions = ['label', 'move', 'copy', 'delete'];
    var api = createAPI(data, actions);
    var resource = $resource(url, defaultParams, api);
    resource.getDownloadURL = function(fileId) {
      return new XWiki.Document(fileId).getURL('get', 'action=download&amp;form_token=' + formToken);
    };
    return resource;
  }]);

  driveServices.factory('User', ['$resource', function($resource) {
    // We use an URL dispatcher to overcome the fact that in a domain-based farm we cannot compute an entity URL on the
    // client side knowing only the entity reference. Precisely, we cannot compute the URL to access an entity from a
    // different wiki knowing only the wiki id. We need to know the domain associated with the wiki id, and the domain
    // is stored on the wiki descriptor (on the main wiki). Thus we would need to make an additional request to get the
    // entity URL. The workaround is to use a dedicated page (service) that redirects to the entity specified on the
    // request parameters.
    var urlDispatcher = new XWiki.Document('URLDispatcher', 'FileManagerCode');
    var getDocumentURL = function(wiki, space, page) {
      return urlDispatcher.getURL('get', $.param({
        entityType: 'document',
        wiki: wiki,
        space: space,
        page: page
      }));
    };

    var getAttachmentURL = function(docRef, file, queryString) {
      return urlDispatcher.getURL('get', $.param({
        entityType: 'attachment',
        wiki: docRef.wiki,
        space: docRef.space,
        page: docRef.page,
        file: file,
        queryString: queryString
      }));
    };

    var getAvatarURL = function(user) {
      if (user.avatar) {
        // Resize the avatar image on the server (use the medium avatar size as it may have been already cached on the
        // server since it is used for comments).
        return getAttachmentURL(user.reference, user.avatar, 'width=50');
      } else {
        return '$xwiki.getSkinFile("icons/xwiki/noavatar.png")';
      }
    };

    var getName = function(user) {
      var firstName = user.first_name || '';
      var lastName = user.last_name || '';
      var name = (firstName + ' ' + lastName).trim();
      if (name == '') {
        name = user.alias;
        if (user.reference.wiki != XWiki.currentWiki) {
          name += ' (' + user.reference.wiki + ')';
        }
      }
      return name;
    };

    /*
    #set ($wikiFilterQuery = $xcontext.database)
    #set ($userScope = "$!services.wiki.user.userScope")
    #if ($userScope == 'LOCAL_AND_GLOBAL')
      #set ($wikiFilterQuery = "($xcontext.database OR $xcontext.mainWikiName)")
    #elseif ($userScope == 'GLOBAL_ONLY')
      #set ($wikiFilterQuery = $xcontext.mainWikiName)
    #end
    */
    var wikiFilterQuery = 'fq=wiki:$wikiFilterQuery';

    var fromSolrDoc = function(solrDoc) {
      var reference = new XWiki.DocumentReference(solrDoc.wiki, solrDoc.space, solrDoc.name);
      reference = reference.relativeTo(new XWiki.WikiReference(XWiki.currentWiki));
      var user = {
        reference: {
          wiki: solrDoc.wiki,
          space: solrDoc.space,
          page: solrDoc.name
        },
        id: XWiki.Model.serialize(reference),
        alias: solrDoc.name,
        url: getDocumentURL(solrDoc.wiki, solrDoc.space, solrDoc.name)
      };
      var prefix = 'property.XWiki.XWikiUsers.';
      for (var key in solrDoc) {
        if (key.substr(0, prefix.length) == prefix) {
          var property = key.substr(prefix.length);
          if (property.substr(-2) == '__') {
            property = property.substr(0, property.length - 2);
          } else {
            var suffixPos = property.lastIndexOf('_');
            if (suffixPos &gt; 0) {
              property = property.substr(0, suffixPos);
            }
          }
          var values = solrDoc[key];
          user[property] = (angular.isArray(values) &amp;&amp; values.length == 1) ? values[0] : values;
        }
      }
      user.name = getName(user);
      user.avatarURL = getAvatarURL(user);
      return user;
    };

    var fromRest = function(result) {
      var reference = new XWiki.DocumentReference(result.wiki, result.space, result.pageName);
      reference = reference.relativeTo(new XWiki.WikiReference(XWiki.currentWiki));
      var user = {
        reference: {
          wiki: result.wiki,
          space: result.space,
          page: result.pageName
        },
        id: XWiki.Model.serialize(reference),
        alias: result.pageName,
        url: getDocumentURL(result.wiki, result.space, result.pageName)
      };
      angular.forEach(result.properties, function(property) {
        user[property.name] = property.value;
      })
      user.name = getName(user);
      user.avatarURL = getAvatarURL(user);
      return user;
    };

    // The colon ':' is a special character for entity references so we use '!' instead to create the URL and then
    // replace it with ':' so that Angular can find the parameter.
    var url = new XWiki.Document('!page', '!space', '!wiki').getRestURL('objects/XWiki.XWikiUsers/0')
      .replace(/\/!/g, '/:');
    var resource = $resource(url, {}, {
      get: {
        cache: true,
        transformResponse: function(response, headersGetter) {
          return fromRest(angular.fromJson(response));
        }
      },
      query: {
        params: {
          outputSyntax: 'plain',
          query: ['q=*__INPUT__*', 'fq=type:DOCUMENT', 'fq=class:XWiki.XWikiUsers', wikiFilterQuery,
            'qf=property.XWiki.XWikiUsers.last_name^10 property.XWiki.XWikiUsers.first_name^5 name^2.5'].join('\n')
        },
        url: new XWiki.Document('SolrService', 'FileManagerCode').getURL('get'),
        isArray: true,
        transformResponse: function(results, headersGetter) {
          var users = [];
          angular.forEach(angular.fromJson(results), function(result) {
            users.push(fromSolrDoc(result));
          });
          return users;
        }
      }
    });

    resource.fromId = function(id) {
      var reference = XWiki.Model.resolve(id, XWiki.EntityType.DOCUMENT);
      return fromSolrDoc({
        wiki: reference.extractReferenceValue(XWiki.EntityType.WIKI) || XWiki.currentWiki,
        space: reference.extractReferenceValue(XWiki.EntityType.SPACE) || XWiki.currentSpace,
        name: reference.name
      });
    };

    resource.getById = function(id, success, error) {
      var reference = XWiki.Model.resolve(id, XWiki.EntityType.DOCUMENT);
      return this.get({
        wiki: reference.extractReferenceValue(XWiki.EntityType.WIKI) || XWiki.currentWiki,
        space: reference.extractReferenceValue(XWiki.EntityType.SPACE) || XWiki.currentSpace,
        page: reference.name
      }, success, error);
    };

    return resource;
  }]);

  driveServices.factory('FileTree', function() {
    var createFolder = function(name, parent) {
      return {
        name: name,
        type: 'folder',
        size: 0,
        parent: parent,
        children: [],
        addFile: function(file) {
          this.children.push(file);
          var parent = this;
          while (parent) {
            parent.size += file.size;
            parent = parent.parent;
          }
        }
      };
    };

    var getPath = function(file) {
      var path = file.webkitRelativePath || '';
      return path.split('/').slice(0, -1);
    };

    var getFolder = function(parent, path) {
      if (!path.length) {
        return parent;
      } else {
        var folder;
        for (var i = 0; i &lt; parent.children.length; i++) {
          var child = parent.children[i];
          if (child.type == 'folder' &amp;&amp; child.name == path[0]) {
            folder = child;
            break;
          }
        }
        if (!folder) {
          folder = createFolder(path[0], parent);
          parent.children.push(folder);
        }
        return getFolder(folder, path.slice(1));
      }
    };

    return {
      fromFileList: function(files, callback) {
        var root = createFolder();
        var processing = files.length;

        var maybeCallback = function() {
          !--processing &amp;&amp; callback(root.children);
        };

        angular.forEach(files, function(file) {
          var folder = getFolder(root, getPath(file));
          if (callback &amp;&amp; folder == root &amp;&amp; file.size &lt;= 4096) {
            // Make sure the root files can be read. This is especially useful for browsers that don't support folder
            // upload: if you drop a folder the file list will contain an item that looks like a file but that cannot be
            // read. See http://hs2n.wordpress.com/2012/08/13/detecting-folders-in-html-drop-area/ .
            try {
              var reader = new FileReader();
              reader.onloadend = function (event) {
                !(event || window.event).target.error &amp;&amp; folder.addFile(file);
                maybeCallback();
              };
              reader.readAsDataURL(file);
            } catch (error) {
              maybeCallback();
            }
          } else {
            folder.addFile(file);
            callback &amp;&amp; maybeCallback();
          }
        });

        return root.children;
      },

      fromEntryList: function(items, callback) {
        items = items || [];
        var processing = items.length;
        var root = createFolder();

        var maybeCallback = function() {
          !--processing &amp;&amp; callback(root.children);
        };

        var traverseFileTree = function(entry, parent) {
          if (entry.isDirectory) {
            var folder = createFolder(entry.name, parent);
            parent.children.push(folder);
            var directoryReader = entry.createReader();
            var onReadEntries = function(childEntries) {
              if (!childEntries.length) {
                maybeCallback();
              } else {
                processing += childEntries.length;
                angular.forEach(childEntries, function(childEntry) {
                  traverseFileTree(childEntry, folder);
                });
                // Keep calling readEntries() until no more results are returned.
                // See https://developer.mozilla.org/en-US/docs/Web/API/DirectoryReader#readEntries
                directoryReader.readEntries(onReadEntries, maybeCallback);
              }
            };
            directoryReader.readEntries(onReadEntries, maybeCallback);
          } else {
            entry.file(function(file) {
              parent.addFile(file);
              maybeCallback();
            }, maybeCallback);
          }
        };

        var isASCII = function(str) {
          return /^[\000-\177]*$/.test(str);
        };

        angular.forEach(items || [], function(item) {
          var entry = item.webkitGetAsEntry();
          if (entry) {
            // Fix for Chrome bug https://code.google.com/p/chromium/issues/detail?id=149735
            if (entry.isFile &amp;&amp; !isASCII(entry.name)) {
              root.addFile(item.getAsFile());
              maybeCallback();
            } else {
              traverseFileTree(entry, root);
            }
          } else {
            maybeCallback();
          }
        });
      }
    };
  });

  driveServices.factory('DriveJob', function() {
    var jobServiceURL = XWiki.currentDocument.getURL('get', 'outputSyntax=plain');
    var jobRunner = new JobRunner({
      createStatusRequest: function(jobId) {
        return {
          url: jobServiceURL,
          data: {
            id: jobId,
            data: 'jobStatus'
          }
        };
      },
      createAnswerRequest: function(jobId, data) {
        return {
          url: jobServiceURL,
          data: $.extend({}, data, {
            id: jobId,
            action: 'answer',
            form_token: formToken
          })
        };
      }
    });

    return {
      run: function(action, data) {
        data = data || {};
        data.action = action;
        data.form_token = formToken;
        // We pass the serialized data because we want the traditional serialization mode.
        return jobRunner.run(jobServiceURL, $.param(data, true));
      },
      resume: function(jobId) {
        return jobRunner.resume(jobId);
      }
    };
  });</code>
    </property>
    <property>
      <name>Services: Drive, Folder, File, User, FileTree, DriveJob</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>FileManagerCode.DriveSheet</name>
    <number>2</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>4af06c3a-4fbf-4c6f-8d87-01c56417dfbb</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>  var driveFilters = angular.module('driveFilters', []);

  driveFilters.filter('bytes', function() {
    return function(bytes) {
      bytes = parseFloat(bytes);
      if (isNaN(bytes) || !isFinite(bytes)) {
        return '-';
      }
      var precision = 10;
      var base = 1024;
      var units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
      var exponent = 0;
      if (bytes &gt; 0) {
        exponent = Math.floor(Math.log(bytes) / Math.log(base));
      }
      var value = bytes / Math.pow(base, Math.floor(exponent));
      if (value != Math.floor(value)) {
        value = Math.floor(value * precision) / precision;
      }
      return value + ' ' + units[exponent];
    }
  });

  driveFilters.filter('mediaType', function() {
    var categories = {
      "$services.localization.render('fileManager.fileType.text')":
        ['text/', 'application/xml', 'application/javascript', 'application/ecmascript',
        'application/json', 'application/x-sh', '+xml'],
      "$services.localization.render('fileManager.fileType.image')": ['image/'],
      "$services.localization.render('fileManager.fileType.audio')": ['audio/'],
      "$services.localization.render('fileManager.fileType.video')": ['video/'],
      "$services.localization.render('fileManager.fileType.document')":
        ['application/pdf', 'application/postscript', 'application/msword', 'application/vnd.ms-word.',
        'application/vnd.oasis.opendocument.text', 'application/vnd.openxmlformats-officedocument.word'],
      "$services.localization.render('fileManager.fileType.presentation')":
        ['application/vnd.ms-powerpoint', 'application/vnd.oasis.opendocument.presentation',
        'application/vnd.openxmlformats-officedocument.presentation'],
      "$services.localization.render('fileManager.fileType.spreadsheet')":
        ['application/vnd.ms-excel', 'application/vnd.oasis.opendocument.spreadsheet',
        'application/vnd.openxmlformats-officedocument.spreadsheet'],
      "$services.localization.render('fileManager.fileType.archive')":
        ['application/zip', 'application/x-gzip', 'application/x-bzip', 'application/x-tar',
        'application/x-gtar', 'application/vnd.xara', '-archive', '-compressed', '-package', '+zip'],
      "$services.localization.render('fileManager.fileType.font')": ['application/font-', 'application/x-font-']
    };

    var getCategory = function(mediaType) {
      for (var category in categories) {
        var patterns = categories[category];
        for (var i = 0; i &lt; patterns.length; i++) {
          var pattern = patterns[i];
          if (mediaType == pattern || mediaType.substr(0, pattern.length) == pattern
              || mediaType.substring(mediaType.length - pattern.length) == pattern) {
            return category;
          }
        }
      }
    };

    return function(mediaType) {
      if (!mediaType) {
        return '-';
      }
      var category = getCategory(mediaType);
      if (category) {
        return category;
      } else {
        mediaType = mediaType.substring(mediaType.indexOf('/') + 1);
        if (mediaType.substr(0, 7) == 'x-font-') {
          // Fonts have a dedicated category so we can remove the 'x-font-' prefix.
          mediaType = mediaType.substr(7);
        } else if (mediaType.substr(0, 2) == 'x-') {
          // Non-standard media type, i.e. not registered with the Internet Assigned Numbers Authority (IANA).
          mediaType = mediaType.substr(2);
        } else if (mediaType.substr(0, 4) == 'vnd.') {
          // Vendor specific media type.
          mediaType = mediaType.substr(4);
        }
        // Many media types end with '+xml' or something similar. Let's remove this part.
        var plusIndex = mediaType.lastIndexOf('+');
        if (plusIndex &gt; 0) {
          mediaType = mediaType.substr(0, plusIndex);
        }
        return mediaType.substr(0, 1).toUpperCase() + mediaType.substr(1);
      }
    }
  });

  driveFilters.filter('timeAgo', ['$filter', function($filter) {
    // We keep the reference time a bit (1s) in the future to prevent displaying absolutes dates for very recent events.
    var referenceTime = (new Date()).getTime() + 1000;
    // Inspired by http://momentjs.com/docs/#/displaying/fromnow/ .
    var milestones = [
      {
        range: '0 to 45 seconds',
        limit: 45,
        text: "$services.localization.render('fileManager.timeAgo.seconds')"
      }, {
        range: '45 to 90 seconds',
        limit: 90,
        text: "$services.localization.render('fileManager.timeAgo.minute')"
      }, {
        range: '90 seconds to 45 minutes',
        limit: 2700,
        text: "$services.localization.render('fileManager.timeAgo.minutes', ['__x__'])",
        unit: 60
      }, {
        range: '45 to 90 minutes',
        limit: 5400,
        text: "$services.localization.render('fileManager.timeAgo.hour')"
      }, {
        range: '90 minutes to 22 hours',
        limit: 22 * 3600,
        text: "$services.localization.render('fileManager.timeAgo.hours', ['__x__'])",
        unit: 3600
      }, {
        range: '22 to 36 hours',
        limit: 36 * 3600,
        text: "$services.localization.render('fileManager.timeAgo.day')"
      }, {
        range: '36 hours to 25 days',
        limit: 25 * 86400,
        text: "$services.localization.render('fileManager.timeAgo.days', ['__x__'])",
        unit: 86400
      }, {
        range: '25 to 45 days',
        value: 45 * 86400,
        text: "$services.localization.render('fileManager.timeAgo.month')"
      }, {
        range: '45 to 345 days',
        limit: 345 * 86400,
        text: "$services.localization.render('fileManager.timeAgo.months', ['__x__'])",
        unit: 31 * 86400
      }, {
        range: '345 to 547 days (1.5 years)',
        limit: 547 * 86400,
        text: "$services.localization.render('fileManager.timeAgo.year')"
      }, {
        range: '548 days+',
        text: "$services.localization.render('fileManager.timeAgo.years', ['__x__'])",
        unit: 365 * 86400
      }
    ];

    return function(timestamp, dateFormat) {
      timestamp = parseInt(timestamp);
      if (isNaN(timestamp) || !isFinite(timestamp)) {
        return '-';
      }

      var now = (new Date()).getTime();
      if (now &gt; referenceTime) {
        // The reference time is older than a second. Update it.
        // Note that we need this in order to avoid and infinite $digest loop.
        // See https://docs.angularjs.org/error/$rootScope/infdig .
        // We keep the reference time a bit (1s) in the future to prevent displaying
        // absolutes dates for very recent events.
        referenceTime = now + 1000;
      }

      var diff = referenceTime - timestamp;
      if (diff &gt;= 0) {
        diff /= 1000;
        for (var i = 0; i &lt; milestones.length; i++) {
          var milestone = milestones[i];
          if (diff &lt;= milestone.limit) {
            var text = milestone.text;
            if (milestone.unit) {
              text = text.replace('__x__', Math.max(Math.floor(diff / milestone.unit), 2));
            }
            return text;
          } else if (!milestone.limit &amp;&amp; milestone.unit) {
            return milestone.text.replace('__x__', Math.max(Math.floor(diff / milestone.unit), 2));
          }
        }
      }

      // Fall-back on the absolute date display.
      return $filter('date')(timestamp, dateFormat);
    }
  }]);

  driveFilters.filter('hide', function() {
    return function(value) {
      return '';
    }
  });

  driveFilters.filter('duration', function() {
    return function(millis) {
      var seconds = Math.floor(millis / 1000);
      if (seconds &lt;= 1) {
        return '1s';
      } else if (seconds &lt; 60) {
        return seconds + 's';
      } else if (seconds &lt; 3600) {
        return Math.floor(seconds / 60) + 'm ' + Math.floor(seconds % 60) + 's';
      } else {
        return Math.floor(seconds / 3600) + 'h ' + Math.floor((seconds % 3600) / 60) + 'm';
      }
    }
  });</code>
    </property>
    <property>
      <name>Filters: bytes, mediaType, timeAgo, hide, duration</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>FileManagerCode.DriveSheet</name>
    <number>3</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>24497a15-b82a-4bac-8ae5-12d53ca01ac8</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>  var driveDirectives = angular.module('driveDirectives', ['driveServices', 'liveTable', 'angularFileUpload', 'ui.bootstrap.dropdown']);

  driveDirectives.directive('file', function() {
    var categories = {
      Text: {
        html: 'html',
        css: 'css',
        page_white_c: 'c',
        page_white_code: 'xml',
        page_white_cplusplus: ['cpp', 'c++'],
        page_white_csharp: 'cs',
        page_white_cup: 'java',
        page_white_database: 'sql',
        page_white_h: 'h',
        page_white_php: 'php',
        page_white_ruby: 'ruby',
        page_white_text: 'txt',
        script: 'js'
      },
      Image: {
        page_white_vector: 'svg',
        picture: ['jpg', 'jpeg', 'png', 'gif']
      },
      Audio: {
        music: ['ogg', 'flac', 'mp3', 'wav']
      },
      Video: {
        film: ['mp4', 'ogv', 'mk', 'avi', 'divx', 'mov'],
        page_white_flash: ['flv', 'fla', 'swf']
      },
      Document: {
        page_red: 'ps',
        page_white_acrobat: 'pdf',
        page_white_word: ['odt', 'odf', 'doc', 'docx', 'sxw', 'stw']
      },
      Presentation: {
        page_white_powerpoint: ['odp', 'ppt', 'pptx']
      },
      Spreadsheet: {
        page_white_excel: ['ods', 'xls', 'xlsx']
      },
      Archive: {
        cup: 'jar',
        'package': 'xar',
        page_white_compressed: ['bz', 'bz2', 'tbz', 'gz', 'tgz', 'rar'],
        page_white_zip: ['zip', '7z']
      },
      Font: {
        font: ['ttf', 'ttc']
      }
    };

    var getIcon = function(fileName) {
      var extensionIndex = fileName.lastIndexOf('.');
      if (extensionIndex &gt;= 0) {
        var extension = fileName.substr(extensionIndex + 1);
        for (var category in categories) {
          var icons = categories[category];
          for (var icon in icons) {
            var extensions = icons[icon];
            if (!angular.isArray(extensions)) {
              extensions = [extensions];
            }
            for (var i = 0; i &lt; extensions.length; i++) {
              if (extension == extensions[i]) {
                return {name: icon, type: category};
              }
            }
          }
        }
      }
      return null;
    };

    return {
      restrict: 'A',
      scope: {
        'file': '='
      },
      template: '&lt;img ng-src="{{icon}}" alt="{{type}}" title="{{type}}" class="icon" /&gt; '
        + '&lt;a href="{{url}}" ng-if="url"&gt;{{file.name}}&lt;/a&gt;&lt;span ng-if="!url"&gt;{{file.name || file.id || "-"}}&lt;/span&gt;',
      link: function(scope, element, attrs) {
        scope.icon = "$xwiki.getSkinFile('icons/silk/page_white.png')";
        scope.type = 'Attachment';
        var icon = getIcon(scope.file.name || scope.file.id || '');
        if (icon) {
          scope.icon = scope.icon.replace('page_white', icon.name);
          scope.type = icon.type;
        }
        scope.$watch('file.id', function(newValue, oldValue) {
          scope.url = scope.file.id &amp;&amp; scope.file.name ? new XWiki.Document(scope.file.id).getURL() : null;
        });
      }
    }
  });

  driveDirectives.directive('user',  ['User', function(User) {
    return {
      restrict: 'A',
      scope: {},
      template: '&lt;img ng-src="{{user.avatarURL}}" alt="Avatar" class="avatar" /&gt; &lt;a href="{{user.url}}" title="{{user.alias}}" '
        + 'ng-if="user.name"&gt;{{user.name}}&lt;/a&gt;&lt;span ng-if="!user.name"&gt;-&lt;/span&gt;',
      link: function(scope, element, attrs) {
        scope.user = User.fromId(attrs.user);
        if (scope.user.name) {
          User.get(scope.user.reference, function(user) {
            scope.user = user;
          });
        }
      }
    }
  }]);

  driveDirectives.directive('paneSplitterHandler', function() {
    return {
      restrict: 'C',
      scope: {},
      link: function(scope, element, attrs) {
        var splitter = $(element).closest('.pane-splitter');
        var leftPane = $(element).prev();
        var startClientX, leftPaneWidth, splitterWidthFactor;

        var resize = function(delta) {
          var absoluteWidth = leftPaneWidth + delta;
          var width = Math.max(absoluteWidth, 0) * splitterWidthFactor;
          // The width must be between 10% and 90%.
          width = Math.min(Math.max(width, 10), 90);
          leftPane.css('width', width + '%');
        };

        splitter.on('mousemove', function (event) {
          if (!startClientX) {
            return;
          }

          var delta = event.clientX - startClientX;
          var callback = function() {
            resize(delta);
          };

          // See https://developer.mozilla.org/en-US/docs/Web/Events/resize#requestAnimationFrame
          if (window.requestAnimationFrame) {
            window.requestAnimationFrame(callback);
          } else {
            setTimeout(callback, 66);
          }
        });

        element.on('mousedown', function (event) {
          event.preventDefault();
          startClientX = event.clientX;
          leftPaneWidth = leftPane[0].offsetWidth;
          splitterWidthFactor = 100 / splitter[0].offsetWidth;
          // Make sure the cursor doesn't flicker.
          splitter.css('cursor', 'ew-resize');
        });

        $(document).on('mouseup', function (event) {
          startClientX = null;
          // Reset the cursor.
          splitter.css('cursor', '');
        });
      }
    };
  });

  driveDirectives.directive('files', ['File', function(File) {
    return {
      restrict: 'E',
      scope: {
        drive: '='
      },
      templateUrl: new XWiki.Document('DriveSheet', 'FileManagerCode').getURL('get', 'template=files&amp;outputSyntax=plain'),
      link: function(scope, element, attrs) {
        scope.id = attrs.id || 'files';
        scope.selection = {};

        scope.getSelectedFiles = function(selection) {
          var selectedFiles = [];
          for (var fileId in selection) {
            var file = selection[fileId];
            if (selection.hasOwnProperty(fileId) &amp;&amp; file) {
              selectedFiles.push(file);
            }
          }
          return selectedFiles;
        };

        var getPaths = function(files) {
          var paths = [];
          var folder = scope.drive.location.type == 'folder' ? scope.drive.location.id : '';
          for (var i = 0; i &lt; files.length; i++) {
            paths.push(folder + '/' + files[i].id);
          }
          return paths;
        };

        var refreshLiveTable = function() {
          scope.source = scope.drive.getFileSource(scope.drive.location.id);
        };

        scope.backToList = function() {
          scope.drive.viewer = 'files';
          refreshLiveTable();
        }

        scope.$watch('drive.location', scope.backToList);

        var canPerformBatchOperation = function(files, action) {
          for (var i = 0; i &lt; files.length; i++) {
            var file = files[i];
            if (!file['can' + action]) {
              return false;
            }
          }
          return files.length &gt; 0;
        };

        scope.canCut = function(files) {
          return canPerformBatchOperation(files, 'Move');
        };
        scope.cut = function(files) {
          scope.clipboard = {
            action: 'move',
            paths: getPaths(files)
          };
        };

        scope.canCopy = function(files) {
          return canPerformBatchOperation(files, 'Copy');
        };
        scope.copy = function(files) {
          scope.clipboard = {
            action: 'copy',
            paths: getPaths(files)
          };
        };

        scope.paste = function() {
          scope.drive[scope.clipboard.action](scope.clipboard.paths, scope.drive.location.id)
            .done(refreshLiveTable);
          if (scope.clipboard.action == 'move') {
            delete scope.clipboard;
          }
        };

        scope.download = function(files) {
          if (files.length == 1) {
            window.location = File.getDownloadURL(files[0].id);
          } else {
            scope.drive.download(getPaths(files));
          }
        };

        scope.rename = function(file) {
          // Clear the selection.
          delete scope.selection[file.id];

          var selectedRows = $(element).find('.xwiki-livetable-display-body').find('input:checked').closest('tr');
          if (selectedRows.length != 1) return;
          var rowScope = angular.element(selectedRows[0]).scope();

          var backToView = function(event) {
            // 'this' is the rename text input.
            // Reset the cell width (it is set below when the rename text input is added).
            $(this).parent().css('width', '').children().show();
            $(this).remove();
          };

          var onRename = function(event) {
            // 'this' is the rename text input.
            backToView.call(this, event);
            // Don't allow slash character inside the file name and make sure the file name is really changed.
            if (this.value != file.name &amp;&amp; this.value.indexOf('/') &lt; 0) {
              var oldName = file.name;
              scope.drive.move(['/' + file.id], '/' + this.value)
                .done(refreshLiveTable)
                .fail(function() {
                  // Revert the rename.
                  file.name = oldName;
                  rowScope.$apply();
                });
              // Visual rename, until we get confirmation from the server.
              file.name = this.value;
              rowScope.$apply();
            }
          };

          var onKeyUp = function(event) {
            // 'this' is the rename text input;
            if (event.keyCode == 13) {
              // Enter/Return Key
              onRename.call(this, event);
            } else if (event.keyCode == 27) {
              // Escape Key
              backToView.call(this, event);
            }
          };

          var inputElement = $(document.createElement('input'))
            .prop('type', 'text')
            .val(file.name)
            .css('width', '100%')
            .one('blur', onRename)
            .keyup(onKeyUp);

          var cell = selectedRows.find('td').eq(1);
          // Make sure the column width doesn't change when we insert the rename text input.
          // 6px represents the padding which is included in clientWidth.
          cell.css('width', (cell.prop('clientWidth') - 6) + 'px')
            .children().hide()
            .end().append(inputElement);

          // Focus and select the current file name.
          inputElement.select();
        };

        scope.canDelete = function(files) {
          return canPerformBatchOperation(files, 'Delete');
        };
        scope['delete'] = function(files) {
          if (window.confirm("$services.localization.render('fileManager.action.deleteFilesConfirmation')")) {
            // Clear the selection.
            scope.selection = {};
            scope.drive['delete'](getPaths(files)).done(refreshLiveTable);
          }
        };
      }
    };
  }]);

  driveDirectives.directive('xprogress', function() {
    return {
      restrict: 'E',
      scope: {
        value: '@',
        max: '@'
      },
      template: '&lt;div class="progress"&gt;&lt;div class="progress-bar" role="progressbar" aria-valuemin="0" '
        + 'aria-valuemax="{{max}}" aria-valuenow="{{value}}" style="width: {{100 * value / max}}%;"&gt;&lt;/div&gt;&lt;/div&gt;'
    };
  });

  driveDirectives.directive('fileUpload', ['$upload', function($upload) {
    var formToken = $('meta[name=form_token]').attr('content');

    var scheduleUpload = function(file, folder, uploads) {
      var upload = {
        file: file,
        path: [folder],
        loaded: 0,
        total: file.size,
        status: 'Pending',
        abort: function() {
          this.status = 'Aborted';
          this.request.abort();
          endUpload(this, uploads);
        }
      };
      uploads.pending.push(upload);
      maybePerformUpload(uploads);
    };

    var maybePerformUpload = function(uploads) {
      if (uploads.pending.length == 0 || uploads.running.length &gt;= 4) {
        return;
      }
      var upload = uploads.pending.shift();
      uploads.running.unshift(upload);
      upload.status = 'InProgress';
      upload.start = new Date().getTime();
      var parentFolder = upload.path[upload.path.length - 1];
      upload.request = ${escapetool.d}upload.upload({
        // We need to put the parameters in the URL because if the size of the uploaded file is greater than the
        // configured maximum upload size then an exception is thrown before the parameters are read from the body of
        // the multi-part request, preventing us from detecting and handling the error on the server.
        url: new XWiki.Document(parentFolder).getURL('get', 'action=createFile&amp;form_token=' + formToken),
        file: upload.file,
        fileFormDataName: 'filepath'
      }).progress(function(event) {
        upload.loaded = event.loaded;
        upload.total = event.total;
      }).success(function(data, status, headers, config) {
        upload.status = 'Done';
        upload.file = data;
        endUpload(upload, uploads);
      }).error(function() {
        upload.abort();
      });
    };

    var endUpload = function(upload, uploads) {
      upload.end = new Date().getTime();
      uploads.running.splice(uploads.running.indexOf(upload), 1);
      maybePerformUpload(uploads);
      uploads.finished.unshift(upload);
      if (uploads.finished.length &gt; 6) {
        uploads.finished.splice(-1, 1);
      }
    };

    var uploadFileTree = function(node, parent, drive) {
      if (node.type == 'folder') {
        drive.createFolder(node.name, parent, function(folder) {
          angular.forEach(node.children, function(child) {
            uploadFileTree(child, folder.id, drive);
          });
        });
      } else {
        scheduleUpload(node, parent, drive.uploads);
      }
    };

    return {
      restrict: 'E',
      scope: {
        'drive': '=',
        'back': '&amp;?'
      },
      templateUrl: new XWiki.Document('DriveSheet', 'FileManagerCode').getURL('get', 'template=fileUpload&amp;outputSyntax=plain'),
      link: function(scope, element, attrs) {
        scope.folderSelectionSupported = typeof document.createElement('input').webkitdirectory == 'boolean';
        scope.folderSelectionEnabled = false;
        scope.dropSupported = 'draggable' in document.createElement('span');

        scope.clearUploads = function() {
          scope.drive.uploads.finished.splice(0, scope.drive.uploads.finished.length);
        };

        scope.uploadFiles = function(rootNodes) {
          angular.forEach(rootNodes, function(rootNode) {
            uploadFileTree(rootNode, scope.drive.location.id, scope.drive);
          });
        };
      }
    };
  }]);

  driveDirectives.directive('fileUploadStatus', function() {
    return {
      restrict: 'A',
      scope: {
        'upload': '=fileUploadStatus'
      },
      templateUrl: new XWiki.Document('DriveSheet', 'FileManagerCode').getURL('get', 'template=fileUploadStatus&amp;outputSyntax=plain'),
      link: function(scope, element, attrs) {
        scope.$watch('upload.loaded', function(newValue, oldValue) {
          if (scope.upload.loaded &gt; 0 &amp;&amp; scope.upload.loaded &lt; scope.upload.total) {
            scope.upload.estimatedRemainingTime = (new Date().getTime() - scope.upload.start) *
              (scope.upload.total - scope.upload.loaded) / scope.upload.loaded;
          }
        });
      }
    };
  });

  driveDirectives.directive('onFileSelect', ['FileTree', function(FileTree) {
    return {
      restrict: 'A',
      scope: {
        'onFileSelect': '&amp;',
        'folderSelectionEnabled': '='
      },
      link: function(scope, element, attrs) {
        scope.$watch('folderSelectionEnabled', function(newValue, oldValue) {
          element.prop('webkitdirectory', scope.folderSelectionEnabled);
        });
        element.bind('change', function(event) {
          scope.onFileSelect({$files: FileTree.fromFileList(event.target.files)});
        });
      }
    };
  }]);

  driveDirectives.directive('onFileDrop', ['FileTree', function(FileTree) {
    return {
      restrict: 'A',
      scope: {
        'onFileDrop': '&amp;'
      },
      link: function(scope, element, attrs) {
        var dragOverClass = attrs.dragOverClass || 'dragOver';
        element.bind('dragenter', function(event) {
          element.addClass(dragOverClass);
        });
        element.bind('dragover', function(event) {
          event.preventDefault();
        });
        element.bind('dragleave', function(event) {
          element.removeClass(dragOverClass);
        });
        element.bind('drop', function(event) {
          event.preventDefault();
          element.removeClass(dragOverClass);
          var dataTransfer = event.dataTransfer || event.originalEvent.dataTransfer;
          var items = dataTransfer.items;
          if (items &amp;&amp; items.length &gt; 0 &amp;&amp; items[0].webkitGetAsEntry) {
            FileTree.fromEntryList(items, function(fileTree) {
              scope.onFileDrop({$files: fileTree});
            });
          } else {
            FileTree.fromFileList(dataTransfer.files, function(fileTree) {
              scope.onFileDrop({$files: fileTree});
            });
          }
        });
      }
    };
  }]);</code>
    </property>
    <property>
      <name>Directives: file, user, pane-splitter-handler, files, progress, file-upload, file-upload-status, on-file-select, on-file-drop</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>FileManagerCode.DriveSheet</name>
    <number>4</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>254a86ea-a3c4-41bf-ac58-31ff0d5bc57c</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>  var driveDirectives = angular.module('driveDirectives');

  driveDirectives.directive('driveTree', ['$location', function($location) {
    var isDrive = function(node) {
      return node.id == XWiki.currentPage;
    };

    var defaultViewerByNodeType = {
      drive: 'files',
      folder: 'files',
      folders: null,
      files: 'files',
      jobs: 'jobs'
    };

    return {
      restrict: 'E',
      scope: {
        drive: '='
      },
      link: function(scope, element, attrs) {
        $(element).xtree()
        // Select the node specified on the request URL after the tree is loaded. We tried to listen to the
        // 'ready.jstree' event but it is fired before the drive child nodes are fetched. As a workaround we listen once
        // to the 'after_open.jstree' event, knowing that the drive node is the first tree node that will be opened.
        .one('after_open.jstree', function(event, data) {
          if (isDrive(data.node)) {
            // The drive node has been opened.
            data.instance.openTo($location.search()['driveNode'] || '/allFiles');
          }

        }).on('select_node.jstree deselect_node.jstree', function(event, data) {
          // Prevent nested $apply calls by scheduling the changes to the scope in a future call stack.
          // See https://docs.angularjs.org/error/$rootScope/inprog#inconsistent-api-sync-async-
          setTimeout(function() {
            scope.$apply(function() {
              if (data.selected.length != 1) {
                delete scope.drive.location;
                ${escapetool.d}location.search('driveNode', null);
              } else {
                var selectedNode = data.selected[0];
                if (!scope.drive.location || selectedNode != scope.drive.location.id) {
                  ${escapetool.d}location.search('driveNode', selectedNode);
                  scope.drive.viewer = defaultViewerByNodeType[data.node.data.type];
                  scope.drive.location = {
                    id: selectedNode,
                    type: data.node.data.type,
                    node: data.node
                  };
                }
              }
            })
          }, 0);

        // Enable/Disable context menu items before the context menu is shown.
        }).on('xtree.openContextMenu', function(event, data) {
          if (data.menu.createFolder) {
            data.menu.createFolder._disabled = !data.node.data || !data.node.data.canCreate;
          }
          if (data.menu.createFile) {
            data.menu.createFile._disabled = !data.node.data || !data.node.data.canCreate;
          }

        }).on('xtree.contextMenu.download', function(event, data) {
          var tree = $.jstree.reference(data.reference);
          scope.drive.download(tree.get_selected());
          scope.$apply();

        }).on('xtree.contextMenu.createFile', function(event, data) {
          var tree = $.jstree.reference(data.reference);
          var node = tree.get_node(data.reference);
          tree.deselect_all(true);
          tree.select_node(node);
          setTimeout(function() {
            scope.drive.viewer = 'upload';
            scope.$apply();
          }, 0);

        }).on('xtree.runJob', function(event, promise) {
          promise.progress(function(job) {
            scope.drive.updateJob(job);
            scope.$apply();
          });
        });

        scope.$on('$locationChangeSuccess', function(event) {
          // Update the selected tree node when the location changes (if the tree is loaded).
          var tree = $(element).jstree(true);
          var nodeId = $location.search()['driveNode'];
          if (tree &amp;&amp; nodeId &amp;&amp; tree.get_node('/allFiles') &amp;&amp; !tree.is_selected(nodeId)) {
            tree.deselect_all();
            tree.openTo(nodeId);
          }
        });
      }
    };
  }]);</code>
    </property>
    <property>
      <name>Directives: driveTree</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>FileManagerCode.DriveSheet</name>
    <number>5</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>fd2da515-8a7e-406f-916c-d38c75ae6322</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>  var driveControllers = angular.module('driveControllers', []);

  driveControllers.controller('DownloadCtrl', ['$scope', function ($scope) {
    $scope.isDownloadReady = function(ready) {
      return function(job) {
        return job.request.type == 'fileManager/pack' &amp;&amp; ((ready &amp;&amp; job.state == 'FINISHED')
          || (!ready &amp;&amp; job.state != 'FINISHED'));
      };
    }
  }]);</code>
    </property>
    <property>
      <name>Controllers: download</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>FileManagerCode.DriveSheet</name>
    <number>6</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>daa1291c-94eb-40ab-967b-d3b1c9c766ad</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>  var drive = angular.module('drive', ['driveServices', 'driveFilters', 'driveDirectives', 'driveControllers']);

  drive.controller('DriveCtrl', ['$scope', 'Drive', 'Folder', 'DriveJob', function ($scope, Drive, Folder, DriveJob) {
    var asSource = function(service) {
      return {get: service};
    };

    var updateJob = function(job) {
      var jobs = $scope.drive.jobs;
      for (var i = 0; i &lt; jobs.length; i++) {
        if (jobs[i].id == job.id) {
          jobs[i] = job;
          return;
        }
      }
      jobs.unshift(job);
      if (jobs.length &gt; 100) {
        jobs.splice(-1, 1);
      }
    };

    var runJob = function(type, data) {
      $scope.drive.readOnly = true;
      // We have to schedule a scope update immediately after the state of the promise changes.
      var scheduleScopeUpdate = function() {
        setTimeout(function() {
          $scope.$apply();
        }, 0);
      };
      return DriveJob.run(type, data)
        .progress(function(job) {
          updateJob(job);
          scheduleScopeUpdate();
        })
        .always(function() {
          $scope.drive.readOnly = false;
          scheduleScopeUpdate();
        });
    };

    $scope.drive = {
      readOnly: false,

      location: {
        id: null,
        type: null
      },

      viewer: null,

      jobs: [],
      updateJob: updateJob,

      uploads: {
        pending: [],
        running: [],
        finished: []
      },

      getFileSource: function(locationId) {
        if (locationId == '/allFiles') {
          return asSource(Drive.getAllFiles);
        } else if (locationId == '/orphanFiles') {
          return asSource(Drive.getOrphanFiles);
        } else {
          var folder = Folder.bind({page: locationId});
          return asSource($.proxy(folder.getFiles, folder));
        }
      },

      createFolder: function(name, parent, onSuccess, onError) {
        Drive.createFolder({}, $.param({
          name: name,
          parent: parent
        }), onSuccess, onError);
      },

      move: function(paths, destination) {
        return runJob('move', {
          path: paths,
          destination: destination
        });
      },

      copy: function(paths, destination) {
        return runJob('copy', {
          path: paths,
          destination: destination
        });
      },

      'delete': function(paths) {
        return runJob('delete', {path: paths});
      },

      download: function(paths, outputFileName) {
        this.viewer = 'downloads';
        return runJob('download', {path: paths, name: outputFileName})
          .done(function(job) {
            window.location = job.request.outputFile.url;
          });
      }
    };
  }]);

  angular.bootstrap($('#drive')[0], ['drive']);</code>
    </property>
    <property>
      <name>App</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>FileManagerCode.DriveSheet</name>
    <number>7</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>53d2dd15-02dc-44f1-971c-4ddf4f4e1539</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>});</code>
    </property>
    <property>
      <name>Require End</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>FileManagerCode.DriveSheet</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>907048f6-cec7-4a6b-b40a-d5b3dbf60125</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')

[ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
  display: none !important;
}

/**
 * File Live Table
 */
#files img.avatar,
#files img.icon,
.jobs img.avatar {
  height: 16px;
  vertical-align: bottom;
}
#files thead.xwiki-livetable-display-header td.xwiki-livetable-display-header-filter input {
  /* Overwrite the default padding. */
  padding: 2px;
}

/**
 * Drive Tree
 */
drive-tree {
  display: block;
}
/* Display the root node differently. */
drive-tree.jstree &gt; .jstree-children &gt; .jstree-node &gt; .jstree-icon {
  display: none;
}
drive-tree.jstree &gt; .jstree-children &gt; .jstree-node &gt; .jstree-children &gt; .jstree-node {
  margin-left: 0;
}

/**
 * Pane Splitter
 */
table.pane-splitter {
  border: 1px solid $theme.borderColor;
  border-collapse: collapse;
  table-layout: fixed;
  width: 100%;
}
table.pane-splitter td.pane {
  overflow: hidden;
  padding: 0;
  vertical-align: top;
}
table.pane-splitter td.pane.left {
  width: 25%;
}
table.pane-splitter td.pane-splitter-handler {
  background-color: $theme.borderColor;
  color: $theme.textColor;
  cursor: ew-resize;
  overflow: hidden;
  padding: 0;
  vertical-align: middle;
  width: 1px;
}
table.pane-splitter td.pane-splitter-handler &gt; div {
  margin-left: -3px;
}
table.pane-splitter .pane-content {
  margin: .5em;
}

/**
 * Button Group (Bootstrap)
 */
.no-bootstrap .btn-group {
  display: inline-block;
  position: relative;
  vertical-align: middle;
}
.no-bootstrap .btn {
  border: 1px solid transparent;
  border-radius: 4px;
  cursor: pointer;
  float: left;
  margin: 0;
  padding: 6px 12px;
  white-space: nowrap;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}
.no-bootstrap .btn::-moz-focus-inner {
  padding: 0;
  border: 0;
}
.no-bootstrap .btn:focus,
.no-bootstrap .btn:active:focus,
.no-bootstrap .btn.active:focus {
  outline: thin dotted;
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}
.no-bootstrap .btn:hover,
.no-bootstrap .btn:focus {
  text-decoration:none
}
.no-bootstrap .btn:active,
.no-bootstrap .btn.active {
  background-image: none;
  box-shadow: inset 0 3px 5px rgba(0,0,0,.125);
  outline: 0;
  -webkit-box-shadow: inset 0 3px 5px rgba(0,0,0,.125);
}
.no-bootstrap .btn.disabled,
.no-bootstrap .btn[disabled],
.no-bootstrap fieldset[disabled] .btn {
  box-shadow: none;
  cursor: not-allowed;
  filter: alpha(opacity=65);
  opacity: .65
  pointer-events: none;
  -webkit-box-shadow: none;
}
.no-bootstrap .btn img.icon {
  vertical-align: bottom;
}
.no-bootstrap .btn-group &gt; .btn:focus {
  outline: 0 none;
}
.no-bootstrap .btn-group &gt; .btn:hover,
.no-bootstrap .btn-group &gt; .btn:focus,
.no-bootstrap .btn-group &gt; .btn:active {
  z-index: 2;
}
.no-bootstrap .btn.btn-default {
  background-color: $theme.pageContentBackgroundColor;
  border-color: $theme.borderColor;
  color: $theme.textSecondaryColor;
}
.no-bootstrap .btn.btn-default:hover,
.no-bootstrap .btn.btn-default:focus,
.no-bootstrap .btn.btn-default:active,
.no-bootstrap .btn.btn-default.active {
  background-color: $theme.pageBackgroundColor;
}
.no-bootstrap .btn-group &gt; .btn:first-child:not(:last-child):not(.dropdown-toggle) {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.no-bootstrap .btn-group &gt; .btn:not(:first-child):not(:last-child):not(.dropdown-toggle) {
  border-radius: 0;
}
.no-bootstrap .btn-group &gt; .btn:last-child:not(:first-child),
.no-bootstrap .btn-group &gt; .dropdown-toggle:not(:first-child) {
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}
.no-bootstrap .btn-group .btn + .btn,
.no-bootstrap .btn-group .btn + .btn-group,
.no-bootstrap .btn-group .btn-group + .btn,
.no-bootstrap .btn-group .btn-group + .btn-group {
  margin-left: -1px;
}
.no-bootstrap .btn-toolbar .btn-group {
  margin-left: .5em;
}
.no-bootstrap .btn-toolbar .btn-group:first-of-type {
  margin-left: 0;
}
.no-bootstrap .btn-group &gt; .btn + .dropdown-toggle {
  padding-left: 8px;
  padding-right: 8px;
}
.no-bootstrap .btn .caret {
  border-left: 4px solid transparent;
  border-right: 4px solid transparent;
  border-top: 4px solid;
  display: inline-block;
  height: 0;
  margin-left: 0;
  vertical-align: middle;
  width: 0;
}
.no-bootstrap ul.dropdown-menu {
  background-clip: padding-box;
  background-color: $theme.pageContentBackgroundColor;
  border: 1px solid rgba(0, 0, 0, 0.15);
  border-radius: 4px;
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.176);
  display: none;
  float: left;
  left: 0;
  list-style: none outside none;
  margin: 2px 0 0;
  min-width: 160px;
  padding: 5px 0;
  position: absolute;
  top: 100%;
  z-index: 1000;
}
.no-bootstrap .open &gt; .dropdown-menu {
  display: block;
}
.no-bootstrap .dropdown-menu &gt; li &gt; a {
  color: $theme.textColor;
  display: block;
  padding: 3px 20px;
  white-space: nowrap;
}
.no-bootstrap .dropdown-menu &gt; li &gt; a:hover,
.no-bootstrap .dropdown-menu &gt; li &gt; a:focus {
  background-color: $theme.highlightColor;
  text-decoration: none;
}

/**
 * Uploads &amp; Downloads
 */
ul.uploads,
ul.downloads {
  list-style-type: none;
  margin: 1em 0 .5em 0;
  padding: 0; /* Overwrite Flamingo skin */
}
ul.uploads li.uploads-pending {
  color: $theme.textSecondaryColor;
  font-size: smaller;
}
ul.uploads li.uploads-pending.loading {
  background-position: 3px center;
  padding-left: 24px;
}
ul.uploads li.upload,
ul.downloads li.download {
  padding: .5em 0;
}
ul.uploads li.upload:hover,
ul.downloads li.download:hover {
  background-color: $theme.highlightColor;
}
li.upload .progress-container {
  margin-right: 20px;
  position: relative;
}
li.upload progress,
li.download progress {
  width: 100%;
}
li.upload .progress-container.Aborted .progress-bar {
  background-color: $theme.notificationErrorColor;
}
li.upload .progress-container .cancel.icon {
  padding: 0;
  position: absolute;
  right: -18px;
  top: -1px;
}
li.upload .progress-info,
li.upload .upload-file-path,
li.download .progress-info,
li.download .download-info {
  color: $theme.textSecondaryColor;
  font-size: smaller;
}
li.upload .upload-file,
li.upload .progress-info,
li.download .progress-info {
  opacity: 1;
  padding-left: 3px;
}
li.upload .upload-file {
  margin-bottom: 2px;
}
li.upload .upload-file .icon {
  vertical-align: bottom;
}
.file-drop-zone {
  background-color: $theme.pageBackgroundColor;
  border: 3px dashed $theme.borderColor;
  color: $theme.textSecondaryColor;
  height: 100px;
  line-height: 100px;
  text-align: center;
}
.file-drop-zone.active {
  background-color: $theme.highlightColor;
  border-color: $theme.textSecondaryColor;
}
.pane-content label input {
  vertical-align: middle;
}
li.download .progress-container {
  margin-top: 2px;
}
li.download img.icon {
  padding-left: 3px;
  vertical-align: bottom;
}

/**
 * Progress bar
 */
.progress {
  background-color: $theme.pageBackgroundColor;
  border-radius: 4px;
  box-shadow: 0px 1px 2px rgba(0, 0, 0, 0.1) inset;
  height: 15px;
  overflow: hidden;
}
.progress-bar {
  float: left;
  width: 0;
  height: 100%;
  background-color: $theme.titleColor;
  box-shadow: 0px -1px 0px rgba(0, 0, 0, 0.15) inset;
  transition: width 0.6s ease 0s;
}

/**
 * Jobs
 */
ul.jobs {
  list-style-type: none;
  margin: 0;
  padding: 0; /* Overwrite Flamingo skin */
}
ul.jobs li.job + li.job {
  border-top: 1px dashed $theme.borderColor;
  margin-top: .5em;
}
ul.jobs li.job &gt; dl {
  margin: 0 .5em;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>Styles: File Live Table, Drive Tree, Pane Splitter, Button Group</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
